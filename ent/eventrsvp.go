// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"wedding/ent/event"
	"wedding/ent/eventrsvp"
	"wedding/ent/invitee"

	"entgo.io/ent/dialect/sql"
)

// EventRSVP is the model entity for the EventRSVP schema.
type EventRSVP struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EventRSVPQuery when eager-loading is set.
	Edges          EventRSVPEdges `json:"edges"`
	event_rsvps    *int
	invitee_events *int
}

// EventRSVPEdges holds the relations/edges for other nodes in the graph.
type EventRSVPEdges struct {
	// Event holds the value of the event edge.
	Event *Event `json:"event,omitempty"`
	// Invitee holds the value of the invitee edge.
	Invitee *Invitee `json:"invitee,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventRSVPEdges) EventOrErr() (*Event, error) {
	if e.loadedTypes[0] {
		if e.Event == nil {
			// The edge event was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: event.Label}
		}
		return e.Event, nil
	}
	return nil, &NotLoadedError{edge: "event"}
}

// InviteeOrErr returns the Invitee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventRSVPEdges) InviteeOrErr() (*Invitee, error) {
	if e.loadedTypes[1] {
		if e.Invitee == nil {
			// The edge invitee was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: invitee.Label}
		}
		return e.Invitee, nil
	}
	return nil, &NotLoadedError{edge: "invitee"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EventRSVP) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case eventrsvp.FieldID:
			values[i] = new(sql.NullInt64)
		case eventrsvp.ForeignKeys[0]: // event_rsvps
			values[i] = new(sql.NullInt64)
		case eventrsvp.ForeignKeys[1]: // invitee_events
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type EventRSVP", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EventRSVP fields.
func (er *EventRSVP) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case eventrsvp.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			er.ID = int(value.Int64)
		case eventrsvp.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field event_rsvps", value)
			} else if value.Valid {
				er.event_rsvps = new(int)
				*er.event_rsvps = int(value.Int64)
			}
		case eventrsvp.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field invitee_events", value)
			} else if value.Valid {
				er.invitee_events = new(int)
				*er.invitee_events = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryEvent queries the "event" edge of the EventRSVP entity.
func (er *EventRSVP) QueryEvent() *EventQuery {
	return (&EventRSVPClient{config: er.config}).QueryEvent(er)
}

// QueryInvitee queries the "invitee" edge of the EventRSVP entity.
func (er *EventRSVP) QueryInvitee() *InviteeQuery {
	return (&EventRSVPClient{config: er.config}).QueryInvitee(er)
}

// Update returns a builder for updating this EventRSVP.
// Note that you need to call EventRSVP.Unwrap() before calling this method if this EventRSVP
// was returned from a transaction, and the transaction was committed or rolled back.
func (er *EventRSVP) Update() *EventRSVPUpdateOne {
	return (&EventRSVPClient{config: er.config}).UpdateOne(er)
}

// Unwrap unwraps the EventRSVP entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (er *EventRSVP) Unwrap() *EventRSVP {
	tx, ok := er.config.driver.(*txDriver)
	if !ok {
		panic("ent: EventRSVP is not a transactional entity")
	}
	er.config.driver = tx.drv
	return er
}

// String implements the fmt.Stringer.
func (er *EventRSVP) String() string {
	var builder strings.Builder
	builder.WriteString("EventRSVP(")
	builder.WriteString(fmt.Sprintf("id=%v", er.ID))
	builder.WriteByte(')')
	return builder.String()
}

// EventRSVPs is a parsable slice of EventRSVP.
type EventRSVPs []*EventRSVP

func (er EventRSVPs) config(cfg config) {
	for _i := range er {
		er[_i].config = cfg
	}
}
