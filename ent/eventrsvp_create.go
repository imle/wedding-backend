// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"wedding/ent/event"
	"wedding/ent/eventrsvp"
	"wedding/ent/invitee"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EventRSVPCreate is the builder for creating a EventRSVP entity.
type EventRSVPCreate struct {
	config
	mutation *EventRSVPMutation
	hooks    []Hook
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (erc *EventRSVPCreate) SetEventID(id int) *EventRSVPCreate {
	erc.mutation.SetEventID(id)
	return erc
}

// SetNillableEventID sets the "event" edge to the Event entity by ID if the given value is not nil.
func (erc *EventRSVPCreate) SetNillableEventID(id *int) *EventRSVPCreate {
	if id != nil {
		erc = erc.SetEventID(*id)
	}
	return erc
}

// SetEvent sets the "event" edge to the Event entity.
func (erc *EventRSVPCreate) SetEvent(e *Event) *EventRSVPCreate {
	return erc.SetEventID(e.ID)
}

// SetInviteeID sets the "invitee" edge to the Invitee entity by ID.
func (erc *EventRSVPCreate) SetInviteeID(id int) *EventRSVPCreate {
	erc.mutation.SetInviteeID(id)
	return erc
}

// SetNillableInviteeID sets the "invitee" edge to the Invitee entity by ID if the given value is not nil.
func (erc *EventRSVPCreate) SetNillableInviteeID(id *int) *EventRSVPCreate {
	if id != nil {
		erc = erc.SetInviteeID(*id)
	}
	return erc
}

// SetInvitee sets the "invitee" edge to the Invitee entity.
func (erc *EventRSVPCreate) SetInvitee(i *Invitee) *EventRSVPCreate {
	return erc.SetInviteeID(i.ID)
}

// Mutation returns the EventRSVPMutation object of the builder.
func (erc *EventRSVPCreate) Mutation() *EventRSVPMutation {
	return erc.mutation
}

// Save creates the EventRSVP in the database.
func (erc *EventRSVPCreate) Save(ctx context.Context) (*EventRSVP, error) {
	var (
		err  error
		node *EventRSVP
	)
	if len(erc.hooks) == 0 {
		if err = erc.check(); err != nil {
			return nil, err
		}
		node, err = erc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EventRSVPMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = erc.check(); err != nil {
				return nil, err
			}
			erc.mutation = mutation
			node, err = erc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(erc.hooks) - 1; i >= 0; i-- {
			mut = erc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, erc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (erc *EventRSVPCreate) SaveX(ctx context.Context) *EventRSVP {
	v, err := erc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (erc *EventRSVPCreate) check() error {
	return nil
}

func (erc *EventRSVPCreate) sqlSave(ctx context.Context) (*EventRSVP, error) {
	_node, _spec := erc.createSpec()
	if err := sqlgraph.CreateNode(ctx, erc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (erc *EventRSVPCreate) createSpec() (*EventRSVP, *sqlgraph.CreateSpec) {
	var (
		_node = &EventRSVP{config: erc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: eventrsvp.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: eventrsvp.FieldID,
			},
		}
	)
	if nodes := erc.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventrsvp.EventTable,
			Columns: []string{eventrsvp.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.event_rsvps = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := erc.mutation.InviteeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventrsvp.InviteeTable,
			Columns: []string{eventrsvp.InviteeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: invitee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.invitee_events = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EventRSVPCreateBulk is the builder for creating many EventRSVP entities in bulk.
type EventRSVPCreateBulk struct {
	config
	builders []*EventRSVPCreate
}

// Save creates the EventRSVP entities in the database.
func (ercb *EventRSVPCreateBulk) Save(ctx context.Context) ([]*EventRSVP, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ercb.builders))
	nodes := make([]*EventRSVP, len(ercb.builders))
	mutators := make([]Mutator, len(ercb.builders))
	for i := range ercb.builders {
		func(i int, root context.Context) {
			builder := ercb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EventRSVPMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ercb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ercb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ercb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ercb *EventRSVPCreateBulk) SaveX(ctx context.Context) []*EventRSVP {
	v, err := ercb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
