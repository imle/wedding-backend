// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"wedding/ent/migrate"

	"wedding/ent/event"
	"wedding/ent/eventrsvp"
	"wedding/ent/invitee"
	"wedding/ent/inviteeparty"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Event is the client for interacting with the Event builders.
	Event *EventClient
	// EventRSVP is the client for interacting with the EventRSVP builders.
	EventRSVP *EventRSVPClient
	// Invitee is the client for interacting with the Invitee builders.
	Invitee *InviteeClient
	// InviteeParty is the client for interacting with the InviteeParty builders.
	InviteeParty *InviteePartyClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Event = NewEventClient(c.config)
	c.EventRSVP = NewEventRSVPClient(c.config)
	c.Invitee = NewInviteeClient(c.config)
	c.InviteeParty = NewInviteePartyClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Event:        NewEventClient(cfg),
		EventRSVP:    NewEventRSVPClient(cfg),
		Invitee:      NewInviteeClient(cfg),
		InviteeParty: NewInviteePartyClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:       cfg,
		Event:        NewEventClient(cfg),
		EventRSVP:    NewEventRSVPClient(cfg),
		Invitee:      NewInviteeClient(cfg),
		InviteeParty: NewInviteePartyClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Event.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Event.Use(hooks...)
	c.EventRSVP.Use(hooks...)
	c.Invitee.Use(hooks...)
	c.InviteeParty.Use(hooks...)
}

// EventClient is a client for the Event schema.
type EventClient struct {
	config
}

// NewEventClient returns a client for the Event from the given config.
func NewEventClient(c config) *EventClient {
	return &EventClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `event.Hooks(f(g(h())))`.
func (c *EventClient) Use(hooks ...Hook) {
	c.hooks.Event = append(c.hooks.Event, hooks...)
}

// Create returns a create builder for Event.
func (c *EventClient) Create() *EventCreate {
	mutation := newEventMutation(c.config, OpCreate)
	return &EventCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Event entities.
func (c *EventClient) CreateBulk(builders ...*EventCreate) *EventCreateBulk {
	return &EventCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Event.
func (c *EventClient) Update() *EventUpdate {
	mutation := newEventMutation(c.config, OpUpdate)
	return &EventUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EventClient) UpdateOne(e *Event) *EventUpdateOne {
	mutation := newEventMutation(c.config, OpUpdateOne, withEvent(e))
	return &EventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EventClient) UpdateOneID(id int) *EventUpdateOne {
	mutation := newEventMutation(c.config, OpUpdateOne, withEventID(id))
	return &EventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Event.
func (c *EventClient) Delete() *EventDelete {
	mutation := newEventMutation(c.config, OpDelete)
	return &EventDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EventClient) DeleteOne(e *Event) *EventDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EventClient) DeleteOneID(id int) *EventDeleteOne {
	builder := c.Delete().Where(event.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EventDeleteOne{builder}
}

// Query returns a query builder for Event.
func (c *EventClient) Query() *EventQuery {
	return &EventQuery{
		config: c.config,
	}
}

// Get returns a Event entity by its id.
func (c *EventClient) Get(ctx context.Context, id int) (*Event, error) {
	return c.Query().Where(event.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EventClient) GetX(ctx context.Context, id int) *Event {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRsvps queries the rsvps edge of a Event.
func (c *EventClient) QueryRsvps(e *Event) *EventRSVPQuery {
	query := &EventRSVPQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, id),
			sqlgraph.To(eventrsvp.Table, eventrsvp.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, event.RsvpsTable, event.RsvpsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EventClient) Hooks() []Hook {
	return c.hooks.Event
}

// EventRSVPClient is a client for the EventRSVP schema.
type EventRSVPClient struct {
	config
}

// NewEventRSVPClient returns a client for the EventRSVP from the given config.
func NewEventRSVPClient(c config) *EventRSVPClient {
	return &EventRSVPClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `eventrsvp.Hooks(f(g(h())))`.
func (c *EventRSVPClient) Use(hooks ...Hook) {
	c.hooks.EventRSVP = append(c.hooks.EventRSVP, hooks...)
}

// Create returns a create builder for EventRSVP.
func (c *EventRSVPClient) Create() *EventRSVPCreate {
	mutation := newEventRSVPMutation(c.config, OpCreate)
	return &EventRSVPCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EventRSVP entities.
func (c *EventRSVPClient) CreateBulk(builders ...*EventRSVPCreate) *EventRSVPCreateBulk {
	return &EventRSVPCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EventRSVP.
func (c *EventRSVPClient) Update() *EventRSVPUpdate {
	mutation := newEventRSVPMutation(c.config, OpUpdate)
	return &EventRSVPUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EventRSVPClient) UpdateOne(er *EventRSVP) *EventRSVPUpdateOne {
	mutation := newEventRSVPMutation(c.config, OpUpdateOne, withEventRSVP(er))
	return &EventRSVPUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EventRSVPClient) UpdateOneID(id int) *EventRSVPUpdateOne {
	mutation := newEventRSVPMutation(c.config, OpUpdateOne, withEventRSVPID(id))
	return &EventRSVPUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EventRSVP.
func (c *EventRSVPClient) Delete() *EventRSVPDelete {
	mutation := newEventRSVPMutation(c.config, OpDelete)
	return &EventRSVPDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EventRSVPClient) DeleteOne(er *EventRSVP) *EventRSVPDeleteOne {
	return c.DeleteOneID(er.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EventRSVPClient) DeleteOneID(id int) *EventRSVPDeleteOne {
	builder := c.Delete().Where(eventrsvp.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EventRSVPDeleteOne{builder}
}

// Query returns a query builder for EventRSVP.
func (c *EventRSVPClient) Query() *EventRSVPQuery {
	return &EventRSVPQuery{
		config: c.config,
	}
}

// Get returns a EventRSVP entity by its id.
func (c *EventRSVPClient) Get(ctx context.Context, id int) (*EventRSVP, error) {
	return c.Query().Where(eventrsvp.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EventRSVPClient) GetX(ctx context.Context, id int) *EventRSVP {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEvent queries the event edge of a EventRSVP.
func (c *EventRSVPClient) QueryEvent(er *EventRSVP) *EventQuery {
	query := &EventQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := er.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(eventrsvp.Table, eventrsvp.FieldID, id),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, eventrsvp.EventTable, eventrsvp.EventColumn),
		)
		fromV = sqlgraph.Neighbors(er.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInvitee queries the invitee edge of a EventRSVP.
func (c *EventRSVPClient) QueryInvitee(er *EventRSVP) *InviteeQuery {
	query := &InviteeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := er.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(eventrsvp.Table, eventrsvp.FieldID, id),
			sqlgraph.To(invitee.Table, invitee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, eventrsvp.InviteeTable, eventrsvp.InviteeColumn),
		)
		fromV = sqlgraph.Neighbors(er.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EventRSVPClient) Hooks() []Hook {
	return c.hooks.EventRSVP
}

// InviteeClient is a client for the Invitee schema.
type InviteeClient struct {
	config
}

// NewInviteeClient returns a client for the Invitee from the given config.
func NewInviteeClient(c config) *InviteeClient {
	return &InviteeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `invitee.Hooks(f(g(h())))`.
func (c *InviteeClient) Use(hooks ...Hook) {
	c.hooks.Invitee = append(c.hooks.Invitee, hooks...)
}

// Create returns a create builder for Invitee.
func (c *InviteeClient) Create() *InviteeCreate {
	mutation := newInviteeMutation(c.config, OpCreate)
	return &InviteeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Invitee entities.
func (c *InviteeClient) CreateBulk(builders ...*InviteeCreate) *InviteeCreateBulk {
	return &InviteeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Invitee.
func (c *InviteeClient) Update() *InviteeUpdate {
	mutation := newInviteeMutation(c.config, OpUpdate)
	return &InviteeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InviteeClient) UpdateOne(i *Invitee) *InviteeUpdateOne {
	mutation := newInviteeMutation(c.config, OpUpdateOne, withInvitee(i))
	return &InviteeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InviteeClient) UpdateOneID(id int) *InviteeUpdateOne {
	mutation := newInviteeMutation(c.config, OpUpdateOne, withInviteeID(id))
	return &InviteeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Invitee.
func (c *InviteeClient) Delete() *InviteeDelete {
	mutation := newInviteeMutation(c.config, OpDelete)
	return &InviteeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *InviteeClient) DeleteOne(i *Invitee) *InviteeDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *InviteeClient) DeleteOneID(id int) *InviteeDeleteOne {
	builder := c.Delete().Where(invitee.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InviteeDeleteOne{builder}
}

// Query returns a query builder for Invitee.
func (c *InviteeClient) Query() *InviteeQuery {
	return &InviteeQuery{
		config: c.config,
	}
}

// Get returns a Invitee entity by its id.
func (c *InviteeClient) Get(ctx context.Context, id int) (*Invitee, error) {
	return c.Query().Where(invitee.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InviteeClient) GetX(ctx context.Context, id int) *Invitee {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEvents queries the events edge of a Invitee.
func (c *InviteeClient) QueryEvents(i *Invitee) *EventRSVPQuery {
	query := &EventRSVPQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(invitee.Table, invitee.FieldID, id),
			sqlgraph.To(eventrsvp.Table, eventrsvp.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, invitee.EventsTable, invitee.EventsColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParty queries the party edge of a Invitee.
func (c *InviteeClient) QueryParty(i *Invitee) *InviteePartyQuery {
	query := &InviteePartyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(invitee.Table, invitee.FieldID, id),
			sqlgraph.To(inviteeparty.Table, inviteeparty.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, invitee.PartyTable, invitee.PartyColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InviteeClient) Hooks() []Hook {
	return c.hooks.Invitee
}

// InviteePartyClient is a client for the InviteeParty schema.
type InviteePartyClient struct {
	config
}

// NewInviteePartyClient returns a client for the InviteeParty from the given config.
func NewInviteePartyClient(c config) *InviteePartyClient {
	return &InviteePartyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `inviteeparty.Hooks(f(g(h())))`.
func (c *InviteePartyClient) Use(hooks ...Hook) {
	c.hooks.InviteeParty = append(c.hooks.InviteeParty, hooks...)
}

// Create returns a create builder for InviteeParty.
func (c *InviteePartyClient) Create() *InviteePartyCreate {
	mutation := newInviteePartyMutation(c.config, OpCreate)
	return &InviteePartyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of InviteeParty entities.
func (c *InviteePartyClient) CreateBulk(builders ...*InviteePartyCreate) *InviteePartyCreateBulk {
	return &InviteePartyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for InviteeParty.
func (c *InviteePartyClient) Update() *InviteePartyUpdate {
	mutation := newInviteePartyMutation(c.config, OpUpdate)
	return &InviteePartyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InviteePartyClient) UpdateOne(ip *InviteeParty) *InviteePartyUpdateOne {
	mutation := newInviteePartyMutation(c.config, OpUpdateOne, withInviteeParty(ip))
	return &InviteePartyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InviteePartyClient) UpdateOneID(id int) *InviteePartyUpdateOne {
	mutation := newInviteePartyMutation(c.config, OpUpdateOne, withInviteePartyID(id))
	return &InviteePartyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for InviteeParty.
func (c *InviteePartyClient) Delete() *InviteePartyDelete {
	mutation := newInviteePartyMutation(c.config, OpDelete)
	return &InviteePartyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *InviteePartyClient) DeleteOne(ip *InviteeParty) *InviteePartyDeleteOne {
	return c.DeleteOneID(ip.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *InviteePartyClient) DeleteOneID(id int) *InviteePartyDeleteOne {
	builder := c.Delete().Where(inviteeparty.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InviteePartyDeleteOne{builder}
}

// Query returns a query builder for InviteeParty.
func (c *InviteePartyClient) Query() *InviteePartyQuery {
	return &InviteePartyQuery{
		config: c.config,
	}
}

// Get returns a InviteeParty entity by its id.
func (c *InviteePartyClient) Get(ctx context.Context, id int) (*InviteeParty, error) {
	return c.Query().Where(inviteeparty.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InviteePartyClient) GetX(ctx context.Context, id int) *InviteeParty {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryInvitees queries the invitees edge of a InviteeParty.
func (c *InviteePartyClient) QueryInvitees(ip *InviteeParty) *InviteeQuery {
	query := &InviteeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ip.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(inviteeparty.Table, inviteeparty.FieldID, id),
			sqlgraph.To(invitee.Table, invitee.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, inviteeparty.InviteesTable, inviteeparty.InviteesColumn),
		)
		fromV = sqlgraph.Neighbors(ip.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InviteePartyClient) Hooks() []Hook {
	return c.hooks.InviteeParty
}
