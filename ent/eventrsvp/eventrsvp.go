// Code generated by entc, DO NOT EDIT.

package eventrsvp

const (
	// Label holds the string label denoting the eventrsvp type in the database.
	Label = "event_rsvp"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// EdgeEvent holds the string denoting the event edge name in mutations.
	EdgeEvent = "event"
	// EdgeInvitee holds the string denoting the invitee edge name in mutations.
	EdgeInvitee = "invitee"
	// Table holds the table name of the eventrsvp in the database.
	Table = "event_rsvps"
	// EventTable is the table the holds the event relation/edge.
	EventTable = "event_rsvps"
	// EventInverseTable is the table name for the Event entity.
	// It exists in this package in order to avoid circular dependency with the "event" package.
	EventInverseTable = "events"
	// EventColumn is the table column denoting the event relation/edge.
	EventColumn = "event_rsvps"
	// InviteeTable is the table the holds the invitee relation/edge.
	InviteeTable = "event_rsvps"
	// InviteeInverseTable is the table name for the Invitee entity.
	// It exists in this package in order to avoid circular dependency with the "invitee" package.
	InviteeInverseTable = "invitees"
	// InviteeColumn is the table column denoting the invitee relation/edge.
	InviteeColumn = "invitee_events"
)

// Columns holds all SQL columns for eventrsvp fields.
var Columns = []string{
	FieldID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "event_rsvps"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"event_rsvps",
	"invitee_events",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
