// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"wedding/ent/invitee"
	"wedding/ent/inviteeparty"
	"wedding/ent/predicate"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// InviteeUpdate is the builder for updating Invitee entities.
type InviteeUpdate struct {
	config
	hooks    []Hook
	mutation *InviteeMutation
}

// Where adds a new predicate for the InviteeUpdate builder.
func (iu *InviteeUpdate) Where(ps ...predicate.Invitee) *InviteeUpdate {
	iu.mutation.predicates = append(iu.mutation.predicates, ps...)
	return iu
}

// SetName sets the "name" field.
func (iu *InviteeUpdate) SetName(s string) *InviteeUpdate {
	iu.mutation.SetName(s)
	return iu
}

// SetPartyID sets the "party" edge to the InviteeParty entity by ID.
func (iu *InviteeUpdate) SetPartyID(id int) *InviteeUpdate {
	iu.mutation.SetPartyID(id)
	return iu
}

// SetNillablePartyID sets the "party" edge to the InviteeParty entity by ID if the given value is not nil.
func (iu *InviteeUpdate) SetNillablePartyID(id *int) *InviteeUpdate {
	if id != nil {
		iu = iu.SetPartyID(*id)
	}
	return iu
}

// SetParty sets the "party" edge to the InviteeParty entity.
func (iu *InviteeUpdate) SetParty(i *InviteeParty) *InviteeUpdate {
	return iu.SetPartyID(i.ID)
}

// Mutation returns the InviteeMutation object of the builder.
func (iu *InviteeUpdate) Mutation() *InviteeMutation {
	return iu.mutation
}

// ClearParty clears the "party" edge to the InviteeParty entity.
func (iu *InviteeUpdate) ClearParty() *InviteeUpdate {
	iu.mutation.ClearParty()
	return iu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *InviteeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(iu.hooks) == 0 {
		if err = iu.check(); err != nil {
			return 0, err
		}
		affected, err = iu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InviteeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iu.check(); err != nil {
				return 0, err
			}
			iu.mutation = mutation
			affected, err = iu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iu.hooks) - 1; i >= 0; i-- {
			mut = iu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InviteeUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InviteeUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InviteeUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *InviteeUpdate) check() error {
	if v, ok := iu.mutation.Name(); ok {
		if err := invitee.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (iu *InviteeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   invitee.Table,
			Columns: invitee.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: invitee.FieldID,
			},
		},
	}
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: invitee.FieldName,
		})
	}
	if iu.mutation.PartyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invitee.PartyTable,
			Columns: []string{invitee.PartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inviteeparty.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.PartyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invitee.PartyTable,
			Columns: []string{invitee.PartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inviteeparty.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invitee.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// InviteeUpdateOne is the builder for updating a single Invitee entity.
type InviteeUpdateOne struct {
	config
	hooks    []Hook
	mutation *InviteeMutation
}

// SetName sets the "name" field.
func (iuo *InviteeUpdateOne) SetName(s string) *InviteeUpdateOne {
	iuo.mutation.SetName(s)
	return iuo
}

// SetPartyID sets the "party" edge to the InviteeParty entity by ID.
func (iuo *InviteeUpdateOne) SetPartyID(id int) *InviteeUpdateOne {
	iuo.mutation.SetPartyID(id)
	return iuo
}

// SetNillablePartyID sets the "party" edge to the InviteeParty entity by ID if the given value is not nil.
func (iuo *InviteeUpdateOne) SetNillablePartyID(id *int) *InviteeUpdateOne {
	if id != nil {
		iuo = iuo.SetPartyID(*id)
	}
	return iuo
}

// SetParty sets the "party" edge to the InviteeParty entity.
func (iuo *InviteeUpdateOne) SetParty(i *InviteeParty) *InviteeUpdateOne {
	return iuo.SetPartyID(i.ID)
}

// Mutation returns the InviteeMutation object of the builder.
func (iuo *InviteeUpdateOne) Mutation() *InviteeMutation {
	return iuo.mutation
}

// ClearParty clears the "party" edge to the InviteeParty entity.
func (iuo *InviteeUpdateOne) ClearParty() *InviteeUpdateOne {
	iuo.mutation.ClearParty()
	return iuo
}

// Save executes the query and returns the updated Invitee entity.
func (iuo *InviteeUpdateOne) Save(ctx context.Context) (*Invitee, error) {
	var (
		err  error
		node *Invitee
	)
	if len(iuo.hooks) == 0 {
		if err = iuo.check(); err != nil {
			return nil, err
		}
		node, err = iuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InviteeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iuo.check(); err != nil {
				return nil, err
			}
			iuo.mutation = mutation
			node, err = iuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iuo.hooks) - 1; i >= 0; i-- {
			mut = iuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InviteeUpdateOne) SaveX(ctx context.Context) *Invitee {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *InviteeUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InviteeUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *InviteeUpdateOne) check() error {
	if v, ok := iuo.mutation.Name(); ok {
		if err := invitee.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (iuo *InviteeUpdateOne) sqlSave(ctx context.Context) (_node *Invitee, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   invitee.Table,
			Columns: invitee.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: invitee.FieldID,
			},
		},
	}
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Invitee.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := iuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: invitee.FieldName,
		})
	}
	if iuo.mutation.PartyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invitee.PartyTable,
			Columns: []string{invitee.PartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inviteeparty.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.PartyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invitee.PartyTable,
			Columns: []string{invitee.PartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inviteeparty.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Invitee{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invitee.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
