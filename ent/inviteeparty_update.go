// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"wedding/ent/invitee"
	"wedding/ent/inviteeparty"
	"wedding/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InviteePartyUpdate is the builder for updating InviteeParty entities.
type InviteePartyUpdate struct {
	config
	hooks    []Hook
	mutation *InviteePartyMutation
}

// Where adds a new predicate for the InviteePartyUpdate builder.
func (ipu *InviteePartyUpdate) Where(ps ...predicate.InviteeParty) *InviteePartyUpdate {
	ipu.mutation.predicates = append(ipu.mutation.predicates, ps...)
	return ipu
}

// SetName sets the "name" field.
func (ipu *InviteePartyUpdate) SetName(s string) *InviteePartyUpdate {
	ipu.mutation.SetName(s)
	return ipu
}

// SetCode sets the "code" field.
func (ipu *InviteePartyUpdate) SetCode(s string) *InviteePartyUpdate {
	ipu.mutation.SetCode(s)
	return ipu
}

// AddInviteeIDs adds the "invitees" edge to the Invitee entity by IDs.
func (ipu *InviteePartyUpdate) AddInviteeIDs(ids ...int) *InviteePartyUpdate {
	ipu.mutation.AddInviteeIDs(ids...)
	return ipu
}

// AddInvitees adds the "invitees" edges to the Invitee entity.
func (ipu *InviteePartyUpdate) AddInvitees(i ...*Invitee) *InviteePartyUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ipu.AddInviteeIDs(ids...)
}

// Mutation returns the InviteePartyMutation object of the builder.
func (ipu *InviteePartyUpdate) Mutation() *InviteePartyMutation {
	return ipu.mutation
}

// ClearInvitees clears all "invitees" edges to the Invitee entity.
func (ipu *InviteePartyUpdate) ClearInvitees() *InviteePartyUpdate {
	ipu.mutation.ClearInvitees()
	return ipu
}

// RemoveInviteeIDs removes the "invitees" edge to Invitee entities by IDs.
func (ipu *InviteePartyUpdate) RemoveInviteeIDs(ids ...int) *InviteePartyUpdate {
	ipu.mutation.RemoveInviteeIDs(ids...)
	return ipu
}

// RemoveInvitees removes "invitees" edges to Invitee entities.
func (ipu *InviteePartyUpdate) RemoveInvitees(i ...*Invitee) *InviteePartyUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ipu.RemoveInviteeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ipu *InviteePartyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ipu.hooks) == 0 {
		if err = ipu.check(); err != nil {
			return 0, err
		}
		affected, err = ipu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InviteePartyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ipu.check(); err != nil {
				return 0, err
			}
			ipu.mutation = mutation
			affected, err = ipu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ipu.hooks) - 1; i >= 0; i-- {
			mut = ipu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ipu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ipu *InviteePartyUpdate) SaveX(ctx context.Context) int {
	affected, err := ipu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ipu *InviteePartyUpdate) Exec(ctx context.Context) error {
	_, err := ipu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ipu *InviteePartyUpdate) ExecX(ctx context.Context) {
	if err := ipu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ipu *InviteePartyUpdate) check() error {
	if v, ok := ipu.mutation.Name(); ok {
		if err := inviteeparty.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := ipu.mutation.Code(); ok {
		if err := inviteeparty.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf("ent: validator failed for field \"code\": %w", err)}
		}
	}
	return nil
}

func (ipu *InviteePartyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   inviteeparty.Table,
			Columns: inviteeparty.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: inviteeparty.FieldID,
			},
		},
	}
	if ps := ipu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ipu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inviteeparty.FieldName,
		})
	}
	if value, ok := ipu.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inviteeparty.FieldCode,
		})
	}
	if ipu.mutation.InviteesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inviteeparty.InviteesTable,
			Columns: []string{inviteeparty.InviteesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: invitee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipu.mutation.RemovedInviteesIDs(); len(nodes) > 0 && !ipu.mutation.InviteesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inviteeparty.InviteesTable,
			Columns: []string{inviteeparty.InviteesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: invitee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipu.mutation.InviteesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inviteeparty.InviteesTable,
			Columns: []string{inviteeparty.InviteesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: invitee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ipu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inviteeparty.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// InviteePartyUpdateOne is the builder for updating a single InviteeParty entity.
type InviteePartyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InviteePartyMutation
}

// SetName sets the "name" field.
func (ipuo *InviteePartyUpdateOne) SetName(s string) *InviteePartyUpdateOne {
	ipuo.mutation.SetName(s)
	return ipuo
}

// SetCode sets the "code" field.
func (ipuo *InviteePartyUpdateOne) SetCode(s string) *InviteePartyUpdateOne {
	ipuo.mutation.SetCode(s)
	return ipuo
}

// AddInviteeIDs adds the "invitees" edge to the Invitee entity by IDs.
func (ipuo *InviteePartyUpdateOne) AddInviteeIDs(ids ...int) *InviteePartyUpdateOne {
	ipuo.mutation.AddInviteeIDs(ids...)
	return ipuo
}

// AddInvitees adds the "invitees" edges to the Invitee entity.
func (ipuo *InviteePartyUpdateOne) AddInvitees(i ...*Invitee) *InviteePartyUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ipuo.AddInviteeIDs(ids...)
}

// Mutation returns the InviteePartyMutation object of the builder.
func (ipuo *InviteePartyUpdateOne) Mutation() *InviteePartyMutation {
	return ipuo.mutation
}

// ClearInvitees clears all "invitees" edges to the Invitee entity.
func (ipuo *InviteePartyUpdateOne) ClearInvitees() *InviteePartyUpdateOne {
	ipuo.mutation.ClearInvitees()
	return ipuo
}

// RemoveInviteeIDs removes the "invitees" edge to Invitee entities by IDs.
func (ipuo *InviteePartyUpdateOne) RemoveInviteeIDs(ids ...int) *InviteePartyUpdateOne {
	ipuo.mutation.RemoveInviteeIDs(ids...)
	return ipuo
}

// RemoveInvitees removes "invitees" edges to Invitee entities.
func (ipuo *InviteePartyUpdateOne) RemoveInvitees(i ...*Invitee) *InviteePartyUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ipuo.RemoveInviteeIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ipuo *InviteePartyUpdateOne) Select(field string, fields ...string) *InviteePartyUpdateOne {
	ipuo.fields = append([]string{field}, fields...)
	return ipuo
}

// Save executes the query and returns the updated InviteeParty entity.
func (ipuo *InviteePartyUpdateOne) Save(ctx context.Context) (*InviteeParty, error) {
	var (
		err  error
		node *InviteeParty
	)
	if len(ipuo.hooks) == 0 {
		if err = ipuo.check(); err != nil {
			return nil, err
		}
		node, err = ipuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InviteePartyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ipuo.check(); err != nil {
				return nil, err
			}
			ipuo.mutation = mutation
			node, err = ipuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ipuo.hooks) - 1; i >= 0; i-- {
			mut = ipuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ipuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ipuo *InviteePartyUpdateOne) SaveX(ctx context.Context) *InviteeParty {
	node, err := ipuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ipuo *InviteePartyUpdateOne) Exec(ctx context.Context) error {
	_, err := ipuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ipuo *InviteePartyUpdateOne) ExecX(ctx context.Context) {
	if err := ipuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ipuo *InviteePartyUpdateOne) check() error {
	if v, ok := ipuo.mutation.Name(); ok {
		if err := inviteeparty.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := ipuo.mutation.Code(); ok {
		if err := inviteeparty.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf("ent: validator failed for field \"code\": %w", err)}
		}
	}
	return nil
}

func (ipuo *InviteePartyUpdateOne) sqlSave(ctx context.Context) (_node *InviteeParty, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   inviteeparty.Table,
			Columns: inviteeparty.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: inviteeparty.FieldID,
			},
		},
	}
	id, ok := ipuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing InviteeParty.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ipuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, inviteeparty.FieldID)
		for _, f := range fields {
			if !inviteeparty.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != inviteeparty.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ipuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ipuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inviteeparty.FieldName,
		})
	}
	if value, ok := ipuo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inviteeparty.FieldCode,
		})
	}
	if ipuo.mutation.InviteesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inviteeparty.InviteesTable,
			Columns: []string{inviteeparty.InviteesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: invitee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipuo.mutation.RemovedInviteesIDs(); len(nodes) > 0 && !ipuo.mutation.InviteesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inviteeparty.InviteesTable,
			Columns: []string{inviteeparty.InviteesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: invitee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipuo.mutation.InviteesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inviteeparty.InviteesTable,
			Columns: []string{inviteeparty.InviteesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: invitee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &InviteeParty{config: ipuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ipuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inviteeparty.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
