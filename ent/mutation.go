// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"wedding/ent/invitee"
	"wedding/ent/inviteeparty"
	"wedding/ent/predicate"

	"github.com/facebook/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeInvitee      = "Invitee"
	TypeInviteeParty = "InviteeParty"
)

// InviteeMutation represents an operation that mutates the Invitee nodes in the graph.
type InviteeMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	clearedFields map[string]struct{}
	party         *int
	clearedparty  bool
	done          bool
	oldValue      func(context.Context) (*Invitee, error)
	predicates    []predicate.Invitee
}

var _ ent.Mutation = (*InviteeMutation)(nil)

// inviteeOption allows management of the mutation configuration using functional options.
type inviteeOption func(*InviteeMutation)

// newInviteeMutation creates new mutation for the Invitee entity.
func newInviteeMutation(c config, op Op, opts ...inviteeOption) *InviteeMutation {
	m := &InviteeMutation{
		config:        c,
		op:            op,
		typ:           TypeInvitee,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withInviteeID sets the ID field of the mutation.
func withInviteeID(id int) inviteeOption {
	return func(m *InviteeMutation) {
		var (
			err   error
			once  sync.Once
			value *Invitee
		)
		m.oldValue = func(ctx context.Context) (*Invitee, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Invitee.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withInvitee sets the old Invitee of the mutation.
func withInvitee(node *Invitee) inviteeOption {
	return func(m *InviteeMutation) {
		m.oldValue = func(context.Context) (*Invitee, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m InviteeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m InviteeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *InviteeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *InviteeMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *InviteeMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Invitee entity.
// If the Invitee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InviteeMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *InviteeMutation) ResetName() {
	m.name = nil
}

// SetPartyID sets the "party" edge to the InviteeParty entity by id.
func (m *InviteeMutation) SetPartyID(id int) {
	m.party = &id
}

// ClearParty clears the "party" edge to the InviteeParty entity.
func (m *InviteeMutation) ClearParty() {
	m.clearedparty = true
}

// PartyCleared returns if the "party" edge to the InviteeParty entity was cleared.
func (m *InviteeMutation) PartyCleared() bool {
	return m.clearedparty
}

// PartyID returns the "party" edge ID in the mutation.
func (m *InviteeMutation) PartyID() (id int, exists bool) {
	if m.party != nil {
		return *m.party, true
	}
	return
}

// PartyIDs returns the "party" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PartyID instead. It exists only for internal usage by the builders.
func (m *InviteeMutation) PartyIDs() (ids []int) {
	if id := m.party; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParty resets all changes to the "party" edge.
func (m *InviteeMutation) ResetParty() {
	m.party = nil
	m.clearedparty = false
}

// Op returns the operation name.
func (m *InviteeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Invitee).
func (m *InviteeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *InviteeMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, invitee.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *InviteeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case invitee.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *InviteeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case invitee.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Invitee field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InviteeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case invitee.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Invitee field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *InviteeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *InviteeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InviteeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Invitee numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *InviteeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *InviteeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *InviteeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Invitee nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *InviteeMutation) ResetField(name string) error {
	switch name {
	case invitee.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Invitee field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *InviteeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.party != nil {
		edges = append(edges, invitee.EdgeParty)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *InviteeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case invitee.EdgeParty:
		if id := m.party; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *InviteeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *InviteeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *InviteeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedparty {
		edges = append(edges, invitee.EdgeParty)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *InviteeMutation) EdgeCleared(name string) bool {
	switch name {
	case invitee.EdgeParty:
		return m.clearedparty
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *InviteeMutation) ClearEdge(name string) error {
	switch name {
	case invitee.EdgeParty:
		m.ClearParty()
		return nil
	}
	return fmt.Errorf("unknown Invitee unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *InviteeMutation) ResetEdge(name string) error {
	switch name {
	case invitee.EdgeParty:
		m.ResetParty()
		return nil
	}
	return fmt.Errorf("unknown Invitee edge %s", name)
}

// InviteePartyMutation represents an operation that mutates the InviteeParty nodes in the graph.
type InviteePartyMutation struct {
	config
	op              Op
	typ             string
	id              *int
	name            *string
	code            *string
	clearedFields   map[string]struct{}
	invitees        map[int]struct{}
	removedinvitees map[int]struct{}
	clearedinvitees bool
	done            bool
	oldValue        func(context.Context) (*InviteeParty, error)
	predicates      []predicate.InviteeParty
}

var _ ent.Mutation = (*InviteePartyMutation)(nil)

// inviteepartyOption allows management of the mutation configuration using functional options.
type inviteepartyOption func(*InviteePartyMutation)

// newInviteePartyMutation creates new mutation for the InviteeParty entity.
func newInviteePartyMutation(c config, op Op, opts ...inviteepartyOption) *InviteePartyMutation {
	m := &InviteePartyMutation{
		config:        c,
		op:            op,
		typ:           TypeInviteeParty,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withInviteePartyID sets the ID field of the mutation.
func withInviteePartyID(id int) inviteepartyOption {
	return func(m *InviteePartyMutation) {
		var (
			err   error
			once  sync.Once
			value *InviteeParty
		)
		m.oldValue = func(ctx context.Context) (*InviteeParty, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().InviteeParty.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withInviteeParty sets the old InviteeParty of the mutation.
func withInviteeParty(node *InviteeParty) inviteepartyOption {
	return func(m *InviteePartyMutation) {
		m.oldValue = func(context.Context) (*InviteeParty, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m InviteePartyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m InviteePartyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *InviteePartyMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *InviteePartyMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *InviteePartyMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the InviteeParty entity.
// If the InviteeParty object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InviteePartyMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *InviteePartyMutation) ResetName() {
	m.name = nil
}

// SetCode sets the "code" field.
func (m *InviteePartyMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *InviteePartyMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the InviteeParty entity.
// If the InviteeParty object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InviteePartyMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *InviteePartyMutation) ResetCode() {
	m.code = nil
}

// AddInviteeIDs adds the "invitees" edge to the Invitee entity by ids.
func (m *InviteePartyMutation) AddInviteeIDs(ids ...int) {
	if m.invitees == nil {
		m.invitees = make(map[int]struct{})
	}
	for i := range ids {
		m.invitees[ids[i]] = struct{}{}
	}
}

// ClearInvitees clears the "invitees" edge to the Invitee entity.
func (m *InviteePartyMutation) ClearInvitees() {
	m.clearedinvitees = true
}

// InviteesCleared returns if the "invitees" edge to the Invitee entity was cleared.
func (m *InviteePartyMutation) InviteesCleared() bool {
	return m.clearedinvitees
}

// RemoveInviteeIDs removes the "invitees" edge to the Invitee entity by IDs.
func (m *InviteePartyMutation) RemoveInviteeIDs(ids ...int) {
	if m.removedinvitees == nil {
		m.removedinvitees = make(map[int]struct{})
	}
	for i := range ids {
		m.removedinvitees[ids[i]] = struct{}{}
	}
}

// RemovedInvitees returns the removed IDs of the "invitees" edge to the Invitee entity.
func (m *InviteePartyMutation) RemovedInviteesIDs() (ids []int) {
	for id := range m.removedinvitees {
		ids = append(ids, id)
	}
	return
}

// InviteesIDs returns the "invitees" edge IDs in the mutation.
func (m *InviteePartyMutation) InviteesIDs() (ids []int) {
	for id := range m.invitees {
		ids = append(ids, id)
	}
	return
}

// ResetInvitees resets all changes to the "invitees" edge.
func (m *InviteePartyMutation) ResetInvitees() {
	m.invitees = nil
	m.clearedinvitees = false
	m.removedinvitees = nil
}

// Op returns the operation name.
func (m *InviteePartyMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (InviteeParty).
func (m *InviteePartyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *InviteePartyMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, inviteeparty.FieldName)
	}
	if m.code != nil {
		fields = append(fields, inviteeparty.FieldCode)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *InviteePartyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case inviteeparty.FieldName:
		return m.Name()
	case inviteeparty.FieldCode:
		return m.Code()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *InviteePartyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case inviteeparty.FieldName:
		return m.OldName(ctx)
	case inviteeparty.FieldCode:
		return m.OldCode(ctx)
	}
	return nil, fmt.Errorf("unknown InviteeParty field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InviteePartyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case inviteeparty.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case inviteeparty.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	}
	return fmt.Errorf("unknown InviteeParty field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *InviteePartyMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *InviteePartyMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InviteePartyMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown InviteeParty numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *InviteePartyMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *InviteePartyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *InviteePartyMutation) ClearField(name string) error {
	return fmt.Errorf("unknown InviteeParty nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *InviteePartyMutation) ResetField(name string) error {
	switch name {
	case inviteeparty.FieldName:
		m.ResetName()
		return nil
	case inviteeparty.FieldCode:
		m.ResetCode()
		return nil
	}
	return fmt.Errorf("unknown InviteeParty field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *InviteePartyMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.invitees != nil {
		edges = append(edges, inviteeparty.EdgeInvitees)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *InviteePartyMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case inviteeparty.EdgeInvitees:
		ids := make([]ent.Value, 0, len(m.invitees))
		for id := range m.invitees {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *InviteePartyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedinvitees != nil {
		edges = append(edges, inviteeparty.EdgeInvitees)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *InviteePartyMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case inviteeparty.EdgeInvitees:
		ids := make([]ent.Value, 0, len(m.removedinvitees))
		for id := range m.removedinvitees {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *InviteePartyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedinvitees {
		edges = append(edges, inviteeparty.EdgeInvitees)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *InviteePartyMutation) EdgeCleared(name string) bool {
	switch name {
	case inviteeparty.EdgeInvitees:
		return m.clearedinvitees
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *InviteePartyMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown InviteeParty unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *InviteePartyMutation) ResetEdge(name string) error {
	switch name {
	case inviteeparty.EdgeInvitees:
		m.ResetInvitees()
		return nil
	}
	return fmt.Errorf("unknown InviteeParty edge %s", name)
}
