// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"wedding/ent/backroomuser"

	"github.com/facebook/ent/dialect/sql"
)

// BackroomUser is the model entity for the BackroomUser schema.
type BackroomUser struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"-"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BackroomUser) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case backroomuser.FieldID:
			values[i] = &sql.NullInt64{}
		case backroomuser.FieldUsername, backroomuser.FieldPassword:
			values[i] = &sql.NullString{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type BackroomUser", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BackroomUser fields.
func (bu *BackroomUser) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case backroomuser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bu.ID = int(value.Int64)
		case backroomuser.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				bu.Username = value.String
			}
		case backroomuser.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				bu.Password = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this BackroomUser.
// Note that you need to call BackroomUser.Unwrap() before calling this method if this BackroomUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (bu *BackroomUser) Update() *BackroomUserUpdateOne {
	return (&BackroomUserClient{config: bu.config}).UpdateOne(bu)
}

// Unwrap unwraps the BackroomUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bu *BackroomUser) Unwrap() *BackroomUser {
	tx, ok := bu.config.driver.(*txDriver)
	if !ok {
		panic("ent: BackroomUser is not a transactional entity")
	}
	bu.config.driver = tx.drv
	return bu
}

// String implements the fmt.Stringer.
func (bu *BackroomUser) String() string {
	var builder strings.Builder
	builder.WriteString("BackroomUser(")
	builder.WriteString(fmt.Sprintf("id=%v", bu.ID))
	builder.WriteString(", username=")
	builder.WriteString(bu.Username)
	builder.WriteString(", password=<sensitive>")
	builder.WriteByte(')')
	return builder.String()
}

// BackroomUsers is a parsable slice of BackroomUser.
type BackroomUsers []*BackroomUser

func (bu BackroomUsers) config(cfg config) {
	for _i := range bu {
		bu[_i].config = cfg
	}
}
