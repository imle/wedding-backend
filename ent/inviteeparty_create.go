// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"wedding/ent/invitee"
	"wedding/ent/inviteeparty"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InviteePartyCreate is the builder for creating a InviteeParty entity.
type InviteePartyCreate struct {
	config
	mutation *InviteePartyMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ipc *InviteePartyCreate) SetName(s string) *InviteePartyCreate {
	ipc.mutation.SetName(s)
	return ipc
}

// SetCode sets the "code" field.
func (ipc *InviteePartyCreate) SetCode(s string) *InviteePartyCreate {
	ipc.mutation.SetCode(s)
	return ipc
}

// AddInviteeIDs adds the "invitees" edge to the Invitee entity by IDs.
func (ipc *InviteePartyCreate) AddInviteeIDs(ids ...int) *InviteePartyCreate {
	ipc.mutation.AddInviteeIDs(ids...)
	return ipc
}

// AddInvitees adds the "invitees" edges to the Invitee entity.
func (ipc *InviteePartyCreate) AddInvitees(i ...*Invitee) *InviteePartyCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ipc.AddInviteeIDs(ids...)
}

// Mutation returns the InviteePartyMutation object of the builder.
func (ipc *InviteePartyCreate) Mutation() *InviteePartyMutation {
	return ipc.mutation
}

// Save creates the InviteeParty in the database.
func (ipc *InviteePartyCreate) Save(ctx context.Context) (*InviteeParty, error) {
	var (
		err  error
		node *InviteeParty
	)
	if len(ipc.hooks) == 0 {
		if err = ipc.check(); err != nil {
			return nil, err
		}
		node, err = ipc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InviteePartyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ipc.check(); err != nil {
				return nil, err
			}
			ipc.mutation = mutation
			node, err = ipc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ipc.hooks) - 1; i >= 0; i-- {
			mut = ipc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ipc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ipc *InviteePartyCreate) SaveX(ctx context.Context) *InviteeParty {
	v, err := ipc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (ipc *InviteePartyCreate) check() error {
	if _, ok := ipc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if v, ok := ipc.mutation.Name(); ok {
		if err := inviteeparty.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if _, ok := ipc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New("ent: missing required field \"code\"")}
	}
	if v, ok := ipc.mutation.Code(); ok {
		if err := inviteeparty.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf("ent: validator failed for field \"code\": %w", err)}
		}
	}
	return nil
}

func (ipc *InviteePartyCreate) sqlSave(ctx context.Context) (*InviteeParty, error) {
	_node, _spec := ipc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ipc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ipc *InviteePartyCreate) createSpec() (*InviteeParty, *sqlgraph.CreateSpec) {
	var (
		_node = &InviteeParty{config: ipc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: inviteeparty.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: inviteeparty.FieldID,
			},
		}
	)
	if value, ok := ipc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inviteeparty.FieldName,
		})
		_node.Name = value
	}
	if value, ok := ipc.mutation.Code(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inviteeparty.FieldCode,
		})
		_node.Code = value
	}
	if nodes := ipc.mutation.InviteesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inviteeparty.InviteesTable,
			Columns: []string{inviteeparty.InviteesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: invitee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InviteePartyCreateBulk is the builder for creating many InviteeParty entities in bulk.
type InviteePartyCreateBulk struct {
	config
	builders []*InviteePartyCreate
}

// Save creates the InviteeParty entities in the database.
func (ipcb *InviteePartyCreateBulk) Save(ctx context.Context) ([]*InviteeParty, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ipcb.builders))
	nodes := make([]*InviteeParty, len(ipcb.builders))
	mutators := make([]Mutator, len(ipcb.builders))
	for i := range ipcb.builders {
		func(i int, root context.Context) {
			builder := ipcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InviteePartyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ipcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ipcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ipcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ipcb *InviteePartyCreateBulk) SaveX(ctx context.Context) []*InviteeParty {
	v, err := ipcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
